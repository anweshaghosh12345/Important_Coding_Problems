import java.util.Scanner;

public class circular_LinkedList {
    Node head, head1, head2;
    Node last = null;


    public void addToTheLast(Node node)
    {

        if (head == null)
        {
            head = node;

        } else
        {
            Node temp = head;
            while (temp.next != null)
                temp = temp.next;

            temp.next = node;
        }
    }
    /* Function to print linked list */
    void printList(Node node)
    {
        Node temp = node;
        if(node != null)
        {
            do{
                System.out.print(temp.data+" ");
                temp = temp.next;
            }while (temp != node);
        }
        System.out.println();
    }

    void circular()
    {
        last = head;
        while (last.next != null)
            last = last.next;
        last.next = head;
        //System.out.println(last);
    }



    /* Drier program to test above functions */
    public static void main(String args[])
    {
        
        Scanner sc = new Scanner(System.in);
        int t=sc.nextInt();
        while(t>0)
        {
            int n = sc.nextInt();
            circular_LinkedList llist = new circular_LinkedList();
            int a1=sc.nextInt();
            Node head= new Node(a1);
            llist.addToTheLast(head);
            for (int i = 1; i < n; i++)
            {
                int a = sc.nextInt();
                llist.addToTheLast(new Node(a));


            }
			 
            llist.circular();
           
            gfg g = new gfg();
            
            g.splitList(llist);
            llist.printList(llist.head1);
            llist.printList(llist.head2);
            t--;
        }
    }
}// } Driver Code Ends

class gfg
{
    // Function  to split a circular LinkedList
    void splitList(circular_LinkedList list)
    {
        // Your code here
        circular_LinkedList fst_head=list;
        circular_LinkedList snd_head=list;
        if(list==null){
            return;
        }


    }
}
